# name: main

# # Automatically cancel a previous run.
# concurrency:
#   group: ${{ github.head_ref || github.run_id }}
#   cancel-in-progress: true

# on:
#   push:
#     branches:
#     - main
#   pull_request:
#     branches:
#     - '*'

# jobs:

#   run-tests:

#     name: Run tests for ${{ matrix.os }} on ${{ matrix.python-version }}
#     runs-on: ${{ matrix.os }}

#     strategy:
#       fail-fast: false
#       matrix:
#         os: ['ubuntu-latest']
#         python-version: ['3.8', '3.9', '3.10']

#     steps:
#       - uses: actions/checkout@v2
#       - uses: conda-incubator/setup-miniconda@v2
#         with:
#           auto-update-conda: true
#           python-version: ${{ matrix.python-version }}

#       - name: Install core dependencies.
#         shell: bash -l {0}
#         run: conda install -c conda-forge tox-conda


#       - name: Run unit and integration tests.
#         shell: bash -l {0}
#         run: tox -e pytest -- src tests --cov-report=xml --cov=./ -n auto

#       - name: Upload coverage report.
#         if: runner.os == 'Linux' && matrix.python-version == '3.9'
#         shell: bash -l {0}
#         run: bash <(curl -s https://codecov.io/bash) -F unit -c


name: main

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - '*'

jobs:

  run-tests:

    name: Run tests for ${{ matrix.os }} on ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      - name: Install core dependencies.
        shell: bash -l {0}
        run: conda install -c conda-forge tox-conda coverage

      - name: Run unit and integration tests.
        shell: bash -l {0}
        run: tox -e pytest -- src tests --cov-report=xml --cov=./ -n auto

      - name: Upload coverage report for unit tests and doctests.
        if: runner.os == 'Linux' && matrix.python-version == '3.9'
        shell: bash -l {0}
        run: bash <(curl -s https://codecov.io/bash) -F unit -c


      # - name: Run unit and integration tests.
      #   shell: bash -l {0}
      #   run: tox -e pytest -- src tests --cov-report=xml --cov=./ -n auto

      # - name: Upload coverage report.
      #   if: runner.os == 'Linux' && matrix.python-version == '3.9'
      #   shell: bash -l {0}
      #   run: bash <(curl -s https://codecov.io/bash) -F unit -c

      # - name: Run integration tests.
      #   shell: bash -l {0}
      #   run: tox -e pytest -- src tests -m integration --cov=./ --cov-report=xml -n auto

      # - name: Upload coverage reports of integration tests.
      #   if: runner.os == 'Linux' && matrix.python-version == '3.9'
      #   shell: bash -l {0}
      #   run: bash <(curl -s https://codecov.io/bash) -F integration -c
